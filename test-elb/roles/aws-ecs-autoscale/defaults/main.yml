# Name of the ECS cluster
ecs_cluster_name: "ecs-example"

# Name of the Launch Configuration
ec2_launch_configuration_name: "{{ ecs_cluster_name }}-lc"

ssh_key_name: "your_key"

# EC2 instance type to use
ec2_instance_type: "t2.micro"

# EC2 image that contains a Docker server + ECS Agent, AWS provides a suitable default
ec2_ami_id: "ami-04351e12"

# Name that will be given to EC2 instances created as part of auto-scaling
ec2_instance_name: "ecs_host"

# IAM role that will be used to call the AWS ECS API.  This is normally created when you create a default cluster through the AWS console
ec2_instance_profile_name: ecsInstanceRole

# If you want the instances to be directly remotely accessible
ec2_assign_public_ip: true

# If you want AWS to monitor the EC2 instance for you
ec2_instance_monitoring: true

# Needed to register the EC2 instance with ECS
ec2_userdata: |
  #!/bin/bash
  echo ECS_CLUSTER= {{ ecs_cluster_name}} >> /etc/ecs/ecs.config

# Name of the Auto Scaling Group
ec2_asg_name: "{{ ecs_cluster_name }}-asg"

# Minimum number of EC2 instances to keep running
ec2_asg_min_size: 1

# Maximum number of EC2 instances to keep running
ec2_asg_max_size: 3

# Desired number of EC2 instances to keep running under normal conditions
ec2_asg_desired_capacity: 2

# Tags to set on any EC2 instances created as part of the auto scaling group
ec2_asg_tags:
  - Name: "{{ vpc_name }}_{{ ec2_instance_name }}"

# Wait for EC2 instances within the auto scaling group to become available before moving on to the next task
ec2_asg_wait: true

